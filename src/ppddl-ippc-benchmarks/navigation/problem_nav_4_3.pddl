(define (problem navP)
	 (:domain navigation)
	 (:objects 
		x-0 x-1 x-2 x-3  - posX
		y-0 y-1 y-2  - posY 
 	 )
	 (:init (robot_at_X x-3) (robot_at_Y y-0) (not (robot-dead))
		 (path-X-Y x-0 y-0 x-1 y-0)
		 (path-X-Y x-0 y-0 x-0 y-1)
		 (path-X-Y x-1 y-0 x-2 y-0)
		 (path-X-Y x-1 y-0 x-0 y-0)
		 (path-X-Y x-1 y-0 x-1 y-1)
		 (path-X-Y x-2 y-0 x-3 y-0)
		 (path-X-Y x-2 y-0 x-1 y-0)
		 (path-X-Y x-2 y-0 x-2 y-1)
		 (path-X-Y x-3 y-0 x-2 y-0)
		 (path-X-Y x-3 y-0 x-3 y-1)
		 (path-X-Y x-0 y-1 x-1 y-1)
		 (path-X-Y x-0 y-1 x-0 y-2)
		 (path-X-Y x-0 y-1 x-0 y-0)
		 (path-X-Y x-1 y-1 x-2 y-1)
		 (path-X-Y x-1 y-1 x-0 y-1)
		 (path-X-Y x-1 y-1 x-1 y-2)
		 (path-X-Y x-1 y-1 x-1 y-0)
		 (path-X-Y x-2 y-1 x-3 y-1)
		 (path-X-Y x-2 y-1 x-1 y-1)
		 (path-X-Y x-2 y-1 x-2 y-2)
		 (path-X-Y x-2 y-1 x-2 y-0)
		 (path-X-Y x-3 y-1 x-2 y-1)
		 (path-X-Y x-3 y-1 x-3 y-2)
		 (path-X-Y x-3 y-1 x-3 y-0)
		 (path-X-Y x-0 y-2 x-1 y-2)
		 (path-X-Y x-0 y-2 x-0 y-1)
		 (path-X-Y x-1 y-2 x-2 y-2)
		 (path-X-Y x-1 y-2 x-0 y-2)
		 (path-X-Y x-1 y-2 x-1 y-1)
		 (path-X-Y x-2 y-2 x-3 y-2)
		 (path-X-Y x-2 y-2 x-1 y-2)
		 (path-X-Y x-2 y-2 x-2 y-1)
		 (path-X-Y x-3 y-2 x-2 y-2)
		 (path-X-Y x-3 y-2 x-3 y-1)
	 )
	 (:goal (and (robot-at x-3 y-2) (not (robot-dead))))
	 (:metric minimize (total-cost))
)
